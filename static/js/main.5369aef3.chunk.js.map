{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","mon","idx","SearchBox","placeholder","handleChange","type","onChange","e","App","setState","searchField","target","value","state","fetch","then","response","json","users","catch","error","console","log","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAEaA,G,MAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCFbC,G,MAAW,SAACR,GACrB,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAACC,EAAKC,GAAN,OAChB,cAAC,EAAD,CAAgBR,QAASO,GAAdC,UCNdC,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACId,UAAU,SACVe,KAAK,SACLF,YAAaA,EACbG,SAAU,SAAAC,GAAC,OAAIH,EAAaG,QCoCrBC,G,wDArCb,aAAe,IAAD,8BACZ,gBAeFJ,aAAe,SAACG,GACd,EAAKE,SAAS,CAAEC,YAAaH,EAAEI,OAAOC,SAdtC,EAAKC,MAAQ,CACXf,SAAU,GACVY,YAAa,IALH,E,gEASO,IAAD,OAClBI,MAAM,6CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEX,SAAUoB,OACxCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,qB,+BAOrB,IAAD,EAC0BC,KAAKV,MAA/Bf,EADA,EACAA,SAAUY,EADV,EACUA,YACZc,EAAmB1B,EAAS2B,QAAO,SAAAhC,GAAO,OAC9CA,EAAQE,KAAK+B,cAAcC,SAASjB,EAAYgB,kBAClD,OACE,sBAAKpC,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEa,YAAY,kBACZC,aAAcmB,KAAKnB,eAErB,cAAC,EAAD,CAAUN,SAAU0B,W,GAhCVI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5369aef3.chunk.js","sourcesContent":["import './card.styles.css'\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)","\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = (props) => {\r\n    return (\r\n        <div className='card-list'>\r\n            {props.monsters.map((mon, idx) => (\r\n                <Card key={idx} monster={mon}/>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","import './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input \r\n        className='search'\r\n        type='search' \r\n        placeholder={placeholder} \r\n        onChange={e => handleChange(e)}\r\n    />\r\n)","import { Component } from 'react';\r\nimport { CardList } from './components/card-list/card-list.component'\r\nimport { SearchBox } from './components/search-box/search-box.component';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = { \r\n      monsters: [],\r\n      searchField: ''\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('http://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => this.setState({ monsters: users }))\r\n      .catch(error => console.log('I have error'));\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ searchField: e.target.value })\r\n  }\r\n\r\n  render () {\r\n    const { monsters, searchField } = this.state;\r\n    const filteredMonsters = monsters.filter(monster => \r\n      monster.name.toLowerCase().includes(searchField.toLowerCase()));\r\n    return ( \r\n      <div className=\"App\">\r\n        <h1>Monsters Rolodex</h1>\r\n        <SearchBox \r\n          placeholder='search monsters' \r\n          handleChange={this.handleChange} \r\n        />\r\n        <CardList monsters={filteredMonsters} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}